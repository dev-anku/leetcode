#include <bits/stdc++.h> 

// vectors
vector<int> nums = {1,2,3};
nums.push_back(4);
nums.pop_back();
int len = nums.size();
bool empty = nums.empty();
int x = nums[0];  // access
vector<vector<int>> matrix(3, vector<int>(3, 0)); // 3x3 zero matrix

// strings
string s = "hello";
int n = s.size();
char ch = s[0];
string sub = s.substr(1,3);  // substring
s += " world";               // append

// containers
unordered_set<int> st;
st.insert(5);
st.count(5);      // 1 if exists, 0 otherwise
st.erase(5);

unordered_map<int,int> mp;
mp[5] = 10;
mp.count(5);      // check existence
mp.erase(5);

queue<int> q;
q.push(1);
int front = q.front(); q.pop();

stack<int> s;
s.push(2);
int top = s.top(); s.pop();

priority_queue<int> pq;        // max-heap by default
priority_queue<int, vector<int>, greater<int>> minHeap; // min-heap

// common algorithms
sort(nums.begin(), nums.end());                  // ascending
sort(nums.begin(), nums.end(), greater<int>()); // descending
reverse(nums.begin(), nums.end());
int maxVal = *max_element(nums.begin(), nums.end());
int minVal = *min_element(nums.begin(), nums.end());
int sum = accumulate(nums.begin(), nums.end(), 0); // sum of n natural numbers
